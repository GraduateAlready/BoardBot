import React, { Component} from 'react';
import { Navbar, Nav, Dropdown } from 'react-bootstrap';
import { toast } from 'react-toastify';
import DefaultProfilePicture from '../assets/images/profile.png';
import * as tf from "@tensorflow/tfjs"


function makeImage() {
  var c = document.getElementById("myCanvas");
  var ctx = c.getContext("2d");
  const img = new Image()
  img.src = "kilterboard.png"
  img.onload = () => {
    ctx.drawImage(img, 0, 0)

  }
}

export default class Home extends Component {

  constructor(props) {
    super(props);
    this.state = { value: '' };
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  async loadModel() {
    const idmap = [[1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 0], [1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 0], [1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 0], [1591, 0, 1592, 0, 1593, 0, 1594, 0, 1595, 0, 1596, 0, 1597, 0, 1598, 0, 1599, 0], [1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 0], [1582, 0, 1583, 0, 1584, 0, 1585, 0, 1586, 0, 1587, 0, 1588, 0, 1589, 0, 1590, 0], [1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 0], [1573, 0, 1574, 0, 1575, 0, 1576, 0, 1577, 0, 1578, 0, 1579, 0, 1580, 0, 1581, 0], [1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 0], [1564, 0, 1565, 0, 1566, 0, 1567, 0, 1568, 0, 1569, 0, 1570, 0, 1571, 0, 1572, 0], [1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 0], [1555, 0, 1556, 0, 1557, 0, 1558, 0, 1559, 0, 1560, 0, 1561, 0, 1562, 0, 1563, 0], [1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 0], [1546, 0, 1547, 0, 1548, 0, 1549, 0, 1550, 0, 1551, 0, 1552, 0, 1553, 0, 1554, 0], [1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 0], [1537, 0, 1538, 0, 1539, 0, 1540, 0, 1541, 0, 1542, 0, 1543, 0, 1544, 0, 1545, 0], [1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 0], [1528, 0, 1529, 0, 1530, 0, 1531, 0, 1532, 0, 1533, 0, 1534, 0, 1535, 0, 1536, 0], [1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 0], [1519, 0, 1520, 0, 1521, 0, 1522, 0, 1523, 0, 1524, 0, 1525, 0, 1526, 0, 1527, 0], [1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 0], [1510, 0, 1511, 0, 1512, 0, 1513, 0, 1514, 0, 1515, 0, 1516, 0, 1517, 0, 1518, 0], [1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 0], [1501, 0, 1502, 0, 1503, 0, 1504, 0, 1505, 0, 1506, 0, 1507, 0, 1508, 0, 1509, 0], [1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 0], [1492, 0, 1493, 0, 1494, 0, 1495, 0, 1496, 0, 1497, 0, 1498, 0, 1499, 0, 1500, 0], [1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 0], [1483, 0, 1484, 0, 1485, 0, 1486, 0, 1487, 0, 1488, 0, 1489, 0, 1490, 0, 1491, 0], [1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 0], [1474, 0, 1475, 0, 1476, 0, 1477, 0, 1478, 0, 1479, 0, 1480, 0, 1481, 0, 1482, 0], [1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 0], [1465, 0, 1466, 0, 1467, 0, 1468, 0, 1469, 0, 1470, 0, 1471, 0, 1472, 0, 1473, 0], [1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 0], [1089, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1073, 0], [1464, 1463, 1462, 1461, 1460, 1459, 1458, 1457, 1456, 1455, 1454, 1453, 1452, 1451, 1450, 1449, 1448, 1447], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    const vismap = [[1379, 87, 55, 46], [1380, 147, 51, 46], [1381, 208, 52, 54], [1382, 262, 53, 45], [1383, 320, 56, 45], [1384, 385, 49, 46], [1385, 441, 56, 47], [1386, 504, 51, 49], [1387, 558, 52, 43], [1388, 627, 51, 55], [1389, 683, 54, 48], [1390, 742, 48, 43], [1391, 793, 56, 48], [1392, 863, 53, 48], [1393, 926, 50, 53], [1394, 983, 49, 51], [1395, 1033, 58, 51], [1362, 87, 116, 48], [1363, 142, 115, 40], [1364, 209, 112, 54], [1365, 261, 113, 40], [1366, 320, 112, 39], [1367, 378, 117, 46], [1368, 440, 115, 45], [1369, 499, 109, 40], [1370, 558, 112, 40], [1371, 615, 116, 50], [1372, 685, 116, 49], [1373, 737, 110, 36], [1374, 794, 109, 38], [1375, 862, 113, 46], [1376, 918, 113, 43], [1377, 975, 108, 37], [1378, 1039, 111, 44], [1345, 88, 182, 48], [1346, 146, 171, 45], [1347, 201, 173, 43], [1348, 263, 173, 40], [1349, 323, 173, 45], [1350, 379, 172, 45], [1351, 439, 171, 38], [1352, 502, 173, 47], [1353, 568, 171, 54], [1354, 619, 172, 42], [1355, 683, 171, 49], [1356, 739, 170, 38], [1357, 798, 175, 41], [1358, 855, 170, 39], [1359, 924, 169, 49], [1360, 978, 174, 43], [1361, 1034, 171, 43], [1591, 41, 195, 21], [1592, 161, 193, 21], [1593, 281, 195, 25], [1594, 398, 191, 21], [1595, 519, 191, 19], [1596, 643, 194, 22], [1597, 757, 188, 22], [1598, 880, 190, 22], [1599, 1000, 191, 19], [1328, 82, 229, 33], [1329, 141, 235, 41], [1330, 202, 234, 38], [1331, 259, 231, 43], [1332, 317, 235, 45], [1333, 393, 230, 54], [1334, 437, 229, 39], [1335, 501, 232, 41], [1336, 558, 226, 36], [1337, 622, 233, 48], [1338, 679, 231, 40], [1339, 741, 233, 46], [1340, 799, 237, 49], [1341, 863, 234, 46], [1342, 916, 230, 47], [1343, 976, 231, 42], [1344, 1039, 237, 46], [1582, 101, 254, 20], [1583, 219, 257, 22], [1584, 344, 254, 21], [1585, 461, 253, 21], [1586, 580, 254, 20], [1587, 701, 255, 22], [1588, 821, 256, 22], [1589, 941, 254, 20], [1590, 1060, 256, 21], [1311, 82, 289, 41], [1312, 143, 288, 40], [1313, 204, 286, 39], [1314, 261, 292, 45], [1315, 318, 292, 44], [1316, 380, 286, 41], [1317, 440, 287, 39], [1318, 501, 289, 44], [1319, 565, 291, 50], [1320, 620, 295, 45], [1321, 676, 286, 37], [1322, 746, 294, 50], [1323, 800, 294, 46], [1324, 855, 285, 35], [1325, 924, 299, 43], [1326, 977, 296, 49], [1327, 1032, 286, 35], [1573, 42, 313, 23], [1574, 163, 313, 24], [1575, 282, 312, 20], [1576, 403, 313, 23], [1577, 523, 310, 26], [1578, 642, 308, 25], [1579, 761, 314, 22], [1580, 878, 314, 20], [1581, 1001, 316, 21], [1294, 89, 350, 49], [1295, 141, 353, 44], [1296, 204, 352, 44], [1297, 267, 349, 48], [1298, 325, 354, 49], [1299, 380, 349, 38], [1300, 445, 346, 45], [1301, 502, 351, 47], [1302, 566, 345, 46], [1303, 616, 345, 38], [1304, 678, 354, 42], [1305, 738, 350, 37], [1306, 804, 349, 56], [1307, 857, 345, 39], [1308, 926, 350, 54], [1309, 976, 349, 37], [1310, 1033, 346, 39], [1564, 102, 374, 22], [1565, 219, 371, 17], [1566, 342, 368, 21], [1567, 459, 372, 21], [1568, 578, 371, 21], [1569, 696, 377, 24], [1570, 818, 373, 21], [1571, 938, 370, 23], [1572, 1060, 372, 21], [1277, 86, 407, 48], [1278, 146, 408, 43], [1279, 201, 413, 43], [1280, 259, 416, 52], [1281, 325, 411, 50], [1282, 383, 410, 42], [1283, 436, 411, 44], [1284, 499, 410, 51], [1285, 554, 415, 49], [1286, 616, 411, 40], [1287, 682, 409, 48], [1288, 739, 407, 41], [1289, 791, 406, 33], [1290, 856, 413, 48], [1291, 916, 417, 49], [1292, 980, 412, 50], [1293, 1040, 405, 51], [1555, 41, 436, 21], [1556, 165, 432, 27], [1557, 282, 433, 24], [1558, 403, 432, 18], [1559, 522, 437, 23], [1560, 636, 435, 22], [1561, 759, 432, 23], [1562, 877, 433, 18], [1563, 1003, 430, 28], [1260, 88, 468, 52], [1261, 141, 467, 41], [1262, 207, 467, 47], [1263, 256, 469, 35], [1264, 321, 480, 52], [1265, 380, 469, 39], [1266, 439, 476, 48], [1267, 498, 469, 45], [1268, 559, 476, 42], [1269, 624, 471, 49], [1270, 675, 472, 44], [1271, 742, 476, 49], [1272, 800, 475, 42], [1273, 860, 472, 50], [1274, 912, 468, 43], [1275, 978, 466, 45], [1276, 1041, 474, 52], [1546, 109, 493, 27], [1547, 226, 494, 23], [1548, 341, 495, 23], [1549, 464, 494, 22], [1550, 587, 494, 25], [1551, 702, 493, 22], [1552, 819, 492, 24], [1553, 939, 492, 22], [1554, 1062, 491, 22], [1243, 89, 531, 48], [1244, 141, 530, 36], [1245, 207, 537, 47], [1246, 262, 533, 44], [1247, 318, 530, 40], [1248, 377, 528, 34], [1249, 436, 532, 38], [1250, 502, 530, 45], [1251, 561, 527, 40], [1252, 617, 527, 41], [1253, 683, 530, 44], [1254, 737, 536, 49], [1255, 795, 530, 38], [1256, 858, 534, 45], [1257, 920, 529, 48], [1258, 964, 527, 41], [1259, 1040, 525, 44], [1537, 44, 554, 21], [1538, 167, 555, 21], [1539, 286, 551, 24], [1540, 404, 553, 22], [1541, 523, 550, 23], [1542, 640, 553, 22], [1543, 760, 552, 24], [1544, 884, 551, 24], [1545, 999, 546, 24], [1226, 85, 590, 41], [1227, 145, 592, 44], [1228, 209, 597, 51], [1229, 259, 589, 36], [1230, 321, 589, 42], [1231, 381, 590, 41], [1232, 439, 594, 45], [1233, 505, 591, 45], [1234, 564, 587, 52], [1235, 619, 592, 46], [1236, 682, 591, 43], [1237, 746, 589, 56], [1238, 796, 594, 47], [1239, 855, 586, 39], [1240, 915, 589, 34], [1241, 976, 592, 41], [1242, 1035, 583, 33], [1528, 101, 613, 17], [1529, 222, 612, 17], [1530, 345, 614, 23], [1531, 462, 614, 21], [1532, 581, 612, 20], [1533, 702, 611, 24], [1534, 820, 612, 20], [1535, 940, 609, 19], [1536, 1060, 607, 19], [1209, 84, 652, 43], [1210, 151, 651, 46], [1211, 212, 652, 52], [1212, 268, 650, 52], [1213, 322, 647, 42], [1214, 375, 649, 32], [1215, 437, 648, 37], [1216, 494, 652, 43], [1217, 565, 653, 53], [1218, 618, 645, 38], [1219, 687, 649, 50], [1220, 736, 645, 36], [1221, 801, 650, 51], [1222, 856, 653, 44], [1223, 923, 648, 44], [1224, 980, 649, 41], [1225, 1036, 651, 44], [1519, 44, 672, 22], [1520, 165, 670, 24], [1521, 285, 674, 23], [1522, 403, 671, 21], [1523, 523, 671, 22], [1524, 640, 670, 20], [1525, 763, 672, 26], [1526, 877, 668, 18], [1527, 1003, 665, 24], [1192, 89, 707, 53], [1193, 142, 706, 42], [1194, 207, 704, 52], [1195, 259, 707, 38], [1196, 317, 713, 46], [1197, 382, 715, 46], [1198, 443, 712, 49], [1199, 499, 711, 40], [1200, 566, 707, 54], [1201, 617, 709, 44], [1202, 676, 711, 40], [1203, 741, 711, 47], [1204, 799, 712, 46], [1205, 860, 705, 47], [1206, 916, 704, 42], [1207, 982, 710, 47], [1208, 1039, 704, 42], [1510, 99, 727, 20], [1511, 225, 729, 23], [1512, 346, 730, 24], [1513, 463, 733, 23], [1514, 582, 731, 25], [1515, 699, 733, 22], [1516, 819, 733, 22], [1517, 941, 733, 24], [1518, 1063, 732, 26], [1175, 81, 765, 40], [1176, 137, 767, 44], [1177, 202, 774, 43], [1178, 262, 765, 41], [1179, 324, 772, 42], [1180, 382, 775, 48], [1181, 443, 765, 41], [1182, 500, 768, 39], [1183, 563, 769, 45], [1184, 615, 769, 39], [1185, 679, 775, 43], [1186, 735, 777, 49], [1187, 798, 770, 41], [1188, 854, 770, 38], [1189, 921, 773, 44], [1190, 978, 771, 41], [1191, 1040, 776, 50], [1501, 42, 788, 23], [1502, 161, 791, 26], [1503, 280, 788, 24], [1504, 400, 793, 20], [1505, 521, 792, 23], [1506, 639, 795, 21], [1507, 760, 796, 23], [1508, 879, 795, 21], [1509, 999, 793, 23], [1158, 81, 824, 37], [1159, 148, 825, 47], [1160, 206, 825, 46], [1161, 265, 828, 50], [1162, 321, 827, 36], [1163, 385, 825, 41], [1164, 439, 836, 43], [1165, 502, 829, 44], [1166, 567, 829, 55], [1167, 627, 835, 56], [1168, 677, 828, 41], [1169, 734, 829, 37], [1170, 802, 829, 47], [1171, 857, 829, 43], [1172, 916, 834, 42], [1173, 981, 826, 53], [1174, 1045, 829, 43], [1492, 104, 848, 25], [1493, 219, 852, 22], [1494, 341, 851, 22], [1495, 461, 853, 24], [1496, 581, 848, 22], [1497, 700, 853, 24], [1498, 820, 854, 24], [1499, 938, 854, 21], [1500, 1061, 853, 20], [1141, 86, 886, 48], [1142, 153, 886, 54], [1143, 209, 893, 51], [1144, 260, 886, 36], [1145, 325, 888, 47], [1146, 383, 890, 50], [1147, 438, 888, 44], [1148, 493, 891, 45], [1149, 562, 901, 49], [1150, 623, 891, 50], [1151, 680, 889, 46], [1152, 737, 891, 46], [1153, 796, 894, 47], [1154, 853, 886, 33], [1155, 922, 898, 50], [1156, 980, 885, 47], [1157, 1041, 887, 51], [1483, 41, 910, 23], [1484, 166, 909, 26], [1485, 286, 909, 24], [1486, 398, 910, 18], [1487, 521, 911, 24], [1488, 637, 913, 20], [1489, 757, 912, 20], [1490, 874, 912, 18], [1491, 998, 913, 24], [1124, 76, 949, 43], [1125, 139, 947, 47], [1126, 202, 952, 53], [1127, 262, 951, 48], [1128, 324, 955, 47], [1129, 379, 953, 49], [1130, 448, 948, 53], [1131, 502, 944, 45], [1132, 564, 952, 51], [1133, 621, 947, 43], [1134, 671, 957, 46], [1135, 738, 955, 52], [1136, 800, 951, 42], [1137, 853, 941, 37], [1138, 917, 956, 52], [1139, 979, 955, 47], [1140, 1041, 946, 47], [1474, 102, 967, 21], [1475, 220, 966, 19], [1476, 347, 974, 26], [1477, 461, 971, 21], [1478, 579, 973, 22], [1479, 697, 971, 21], [1480, 821, 974, 28], [1481, 936, 971, 26], [1482, 1062, 969, 22], [1107, 82, 1001, 38], [1108, 145, 1006, 47], [1109, 204, 1009, 40], [1110, 267, 1006, 46], [1111, 321, 1006, 39], [1112, 385, 1014, 45], [1113, 438, 1006, 35], [1114, 502, 1017, 44], [1115, 559, 1013, 46], [1116, 622, 1012, 50], [1117, 674, 1012, 41], [1118, 736, 1006, 34], [1119, 801, 1014, 50], [1120, 862, 1006, 47], [1121, 917, 1009, 41], [1122, 977, 1004, 41], [1123, 1032, 1006, 40], [1465, 43, 1030, 26], [1466, 162, 1026, 19], [1467, 282, 1026, 22], [1468, 402, 1033, 22], [1469, 525, 1029, 27], [1470, 639, 1029, 22], [1471, 757, 1030, 25], [1472, 875, 1031, 25], [1473, 996, 1028, 22], [1090, 81, 1061, 37], [1091, 139, 1067, 39], [1092, 209, 1064, 50], [1093, 262, 1066, 38], [1094, 319, 1066, 41], [1095, 379, 1067, 41], [1096, 443, 1063, 46], [1097, 503, 1068, 47], [1098, 555, 1071, 48], [1099, 615, 1070, 44], [1100, 680, 1066, 43], [1101, 733, 1069, 42], [1102, 793, 1069, 44], [1103, 851, 1064, 32], [1104, 918, 1061, 49], [1105, 975, 1065, 39], [1106, 1033, 1064, 41], [1089, 80, 1126, 36], [1088, 139, 1123, 33], [1087, 199, 1126, 34], [1086, 262, 1125, 33], [1085, 318, 1120, 31], [1084, 378, 1126, 35], [1083, 437, 1123, 32], [1082, 497, 1126, 35], [1081, 554, 1127, 32], [1080, 616, 1126, 33], [1079, 676, 1121, 31], [1078, 736, 1125, 32], [1077, 794, 1119, 30], [1076, 856, 1126, 33], [1075, 916, 1126, 35], [1074, 974, 1123, 32], [1073, 1029, 1126, 33], [1464, 40, 1152, 24], [1463, 103, 1152, 26], [1462, 160, 1153, 25], [1461, 223, 1150, 25], [1460, 281, 1148, 24], [1459, 340, 1151, 22], [1458, 401, 1152, 24], [1457, 459, 1148, 23], [1456, 519, 1151, 22], [1455, 578, 1152, 23], [1454, 640, 1149, 24], [1453, 701, 1154, 25], [1452, 760, 1152, 23], [1451, 821, 1150, 24], [1450, 881, 1155, 25], [1449, 940, 1155, 25], [1448, 993, 1156, 26], [1447, 1057, 1154, 23]]
    const model = await tf.loadLayersModel('https://boardbot.s3.us-east-2.amazonaws.com/BoardBot/model.json');
    const input = tf.randomNormal([1, 100]);
    const output = model.predict(input);
    const result = output.arraySync()[0]
    var visualdisplay = []

    for(let i = 0; i < 36; i++)
    {
        for(let j = 0; j < 18; j++)
        {
	    if(result[i][j][3] > 0)
	    {
		console.log("finish")
		visualdisplay.push(idmap[i][j])
            }
	    else if(result[i][j][2] > 0)
	    {
		console.log("start")
		visualdisplay.push(idmap[i][j])
            }
	    else if(result[i][j][0] > 0)
	    {
		console.log("mid")
		visualdisplay.push(idmap[i][j])
            }
	    else if(result[i][j][1] > 0)
	    {
		console.log("feet")
		visualdisplay.push(idmap[i][j])
            }
	}
    }
    const canvas = this.refs.canvas
    const ctx = canvas.getContext("2d")
    const img = this.refs.image

    img.onload = () => {
      ctx.drawImage(img, 0, 0)
      ctx.font = "40px Courier"
      ctx.fillText(this.props.text, 210, 75)
    }

    visualdisplay.forEach(function (placement, index) {
        vismap.forEach(function (axis, index) {
		if(placement == axis[0]){
			console.log(axis[1])
			ctx.beginPath();
			ctx.strokeStyle = '#cc0000';
			ctx.arc(axis[1], axis[2], axis[3], 0, 2 * Math.PI);
			ctx.lineWidth = 5;
			ctx.stroke();
		}
	});
    });
  }

  handleSubmit(event) {
	console.log(this.state.model.summary())
  }

  state = {
    email: '',
    profilePhoto: localStorage.getItem('imgUrl') ? localStorage.getItem('imgUrl') : DefaultProfilePicture,
    name: localStorage.getItem('name'),
    model: ''
  }

  componentDidMount() {
    this.loadModel()

    const body = {
      token: localStorage.getItem('token'),
    }
    fetch('api/authenticated_endpoint', {
      method: 'POST',
      body: JSON.stringify(body),
      headers: { 'Content-Type': 'application/json' }
    }).then(res => res.json()).then(json => {
      if (json.error) {
        toast.error(json.error)
        this.props.LogOut();
      }
      else {
        this.setState({
          email: json.email,
        })
      }
    });
	   const canvas = this.refs.canvas
    const ctx = canvas.getContext("2d")
    const img = this.refs.image
    img.onload = () => {
      ctx.drawImage(img, 0, 0)
      ctx.font = "40px Courier"
      ctx.fillText(this.props.text, 210, 75)
    }
    }
  render() {
    return (
      <div>
        <nav class="navbar navbar-light bg-light">
	   <div class="container-fluid">
              <span class="navbar-brand mb-0 h1">BoardBot</span>
              <ul class="navbar-nav">
                 <li class="nav-item dropdown">
		    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                       <img src={this.state.profilePhoto} width='30' height='30' className="img-thumbnail rounded-circle p-0" alt="" />
                    </a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink">
                       <a class="dropdown-item" href="#"><Dropdown.Item onClick={this.props.LogOut}>Log Out</Dropdown.Item></a>
                    </div>
                 </li>
              </ul>
	   </div>
        </nav>

        <form>
          <input type="button" onClick={this.drawCircle} />
              <Dropdown.Menu className="mr-5">
                <Dropdown.Item onClick={this.props.LogOut}>Log Out</Dropdown.Item>
              </Dropdown.Menu>
        </form>
        <form onClick={this.handleSubmit}>
          <input type="button" value="Generate climb" />
        </form>
        <canvas ref="canvas" width={1080} height={1170} />
        <div1>
           <img ref="image" src={require('./kilterboard.png')} className="hidden" alt='' />
        </div1>
      </div>
    );
  }
}
